import numpy as np 
import pandas as pd 
ds = pd.read_csv('HousingData.csv') 
ds 
ds.isna().sum() 
ds.describe() 
for i in ds.columns: 
mean_value = ds[i].mean() 
ds[i].fillna(mean_value, inplace=True) 
ds.isna().sum() 
ds.head() 
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import StandardScaler 
X = ds.drop('MEDV', axis=1) 
y = ds['MEDV'] 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, 
random_state=42) 
scaler = StandardScaler() 
X_train_scaled = scaler.fit_transform(X_train) 
X_test_scaled = scaler.transform(X_test) 
import tensorflow 
from tensorflow import keras 
from tensorflow.keras import layers, models 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
model = Sequential() 
model.add(Dense(128, input_shape=(13, ), activation='relu', 
name='dense_1')) 
model.add(Dense(64, activation='relu', name='dense_2')) 
model.add(Dense(1, activation='linear', name='dense_output')) 
model.compile(optimizer='adam', loss='mse', metrics=['mae']) 
model.summary() 
history = model.fit(X_train_scaled, y_train, epochs=100, 
validation_split=0.05, verbose=1) 
mse_nn, mae_nn = model.evaluate(X_test_scaled, y_test) 
print('Mean squared error on test data: ', mse_nn) 
print('Mean absolute error on test data: ', mae_nn) 
import matplotlib.pyplot as plt 
plt.plot(history.history['loss'], label='Training Loss') 
plt.plot(history.history['val_loss'], label='Validation Loss') 
plt.xlabel('Epoch') 
plt.ylabel('Loss (MSE)') 
plt.title('Training vs Validation Loss') 
plt.legend() 
plt.show() 
 
 
 
 
 
 
 
 
 
 